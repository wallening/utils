#配置根Logger
log4j.rootLogger = DEBUG , RollingFile,CONSOLE

#指定com.neusoft包下的所有类的等级为DEBUG
log4j.logger.com.neusoft=DEBUG   
log4j.logger.com.opensymphony.oscache=ERROR

#文件大小达到一定尺寸的时候创建一个新的文件
log4j.appender.RollingFile=org.apache.log4j.RollingFileAppender  
#指定消息的最低层次
log4j.appender.RollingFile.Threshold=DEBUG 
#消息立即输出 默认为true
log4j.appender.RollingFile.ImmediateFlush=false  
#指定消息输出到mylog.txt文件。
log4j.appender.RollingFile.File=/home/acer/log/RollingLog.log   
#将消息增加到指定文件中 默认值是true false指将消息覆盖指定的文件内容
log4j.appender.RollingFile.Append=true
#后缀可以是KB, MB 或者是 GB. 在日志文件到达该大小时，将会自动滚动，即将原来的内容移到mylog.log.1文件
log4j.appender.RollingFile.MaxFileSize=50MB  
#指定可以产生的滚动文件的最大数
log4j.appender.RollingFile.MaxBackupIndex=10
log4j.appender.RollingFile.layout=org.apache.log4j.PatternLayout  
log4j.appender.RollingFile.layout.ConversionPattern=%40d{[yyyy-MM-dd HH:mm:ss-S]} [%-5p] [ %-3.3r] [%-10.10c] %l  [%x] --> %n %m %n

#%m 输出代码中指定的消息
#%p 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL
#%r 输出自应用启动到输出该log信息耗费的毫秒数
#%c 输出所属的类目，通常就是所在类的全名
#%t 输出产生该日志事件的线程名
#%n 输出一个回车换行符，Windows平台为“rn”，Unix平台为“n”
#%d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyyy MMM dd HH:mm:ss,SSS}，输出类似：2002年10月18日 22：10：28，921
#%l 输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。
#[QC]是log信息的开头，可以为任意字符，一般为项目简称。

#控制台
log4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender   
log4j.appender.CONSOLE.Threshold=DEBUG 
log4j.appender.CONSOLE.ImmediateFlush=true  
#指定输出控制台 默认System.out
log4j.appender.CONSOLE.Target=System.err   
log4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayout  
log4j.appender.CONSOLE.layout.ConversionPattern=%40d{[yyyy-MM-dd HH:mm:ss-S]} [%-5p] [ %-3.3r] [%-10.10c] %l  [%x] --> %n %m %n


log4j.logger.aaa= error,DailyRollingFile
#是否集成到rootLogger输出 
log4j.additivity.aaa=false 

#每天产生一个日志文件
log4j.appender.DailyRollingFile=org.apache.log4j.DailyRollingFileAppender  
log4j.appender.DailyRollingFile.Threshold=DEBUG  
log4j.appender.DailyRollingFile.ImmediateFlush=true  
log4j.appender.DailyRollingFile.File=/home/acer/log/DailyLog.log   
log4j.appender.DailyRollingFile.Append=true
#指定文件滚动频率 '.'yyyy-MM: 每月 '.'yyyy-ww: 每周  '.'yyyy-MM-dd: 每天 '.'yyyy-MM-dd-a: 每天的午夜和正午更新一个log日志 '.'yyyy-MM-dd-HH: 每小时 '.'yyyy-MM-dd-HH-mm: 每分钟
log4j.appender.DailyRollingFile.DatePattern='.'yyyy-ww  
log4j.appender.DailyRollingFile.layout=org.apache.log4j.PatternLayout  
log4j.appender.DailyRollingFile.layout.ConversionPattern=%40d{[yyyy-MM-dd HH:mm:ss-S]} [%-5p] [ %-3.3r] [%-10.10c] %l  [%x] --> %n %m %n


#配置日志信息的格式 
#org.apache.log4j.HTMLLayout（以HTML表格形式布局） 
#org.apache.log4j.PatternLayout（可以灵活地指定布局模式）
#org.apache.log4j.SimpleLayout（包含日志信息的级别和信息字符串）
#org.apache.log4j.TTCCLayout（包含日志产生的时间、线程、类别等等信息）

#HTMLLayout 选项
#log4j.appender.****.layout=org.apache.log4j.HTMLLayout
#默认值是false,输出java文件名称和行号   
#og4j.appender.****.layout.LocationInfo=true
#默认值是 Log4J Log Messages
#og4j.appender.****.layout.Title=my app file

#SimpleLayout
# log4j.appender.logfile.layout = org.apache.log4j.SimpleLayout

#XMLLayout 选项
#log4j.appender.****.layout=org.apache.log4j.XMLLayout
#默认值是false,输出java文件名称和行号   
#og4j.appender.****.layout.LocationInfo=true

#文件
log4j.appender.FILE=org.apache.log4j.FileAppender 
log4j.appender.FILE.Threshold=DEBUG  
log4j.appender.FILE.ImmediateFlush=true  
log4j.appender.FILE.File=/home/acer/log/FileLog.log   
log4j.appender.FILE.Append=true
log4j.appender.FILE.layout=org.apache.log4j.PatternLayout   
log4j.appender.FILE.layout.ConversionPattern=%40d{[yyyy-MM-dd HH:mm:ss-S]} [%-5p] [ %-3.3r] [%-10.10c] %l  [%x] --> %n %m %n


#邮件
log4j.appender.MAIL=org.apache.log4j.net.SMTPAppender   
log4j.appender.MAIL.Threshold=DEBUG   
log4j.appender.MAIL.BufferSize=10
log4j.appender.MAIL.From=yourmail@gmail.com  
log4j.appender.MAIL.SMTPHost=smtp.gmail.com  
log4j.appender.MAIL.Subject=Log4J Message   
log4j.appender.MAIL.To=yourmail@gmail.com   
log4j.appender.MAIL.layout=org.apache.log4j.PatternLayout   
log4j.appender.MAIL.layout.ConversionPattern=%40d{[yyyy-MM-dd HH:mm:ss-S]} [%-5p] [ %-3.3r] [%-10.10c] %l  [%x] --> %n %m %n


#数据库
#数据库的链接会有问题，可以重写org.apache.log4j.jdbc.JDBCAppender的getConnection() 使用数据库链接池去得链接，可以避免insert一条就链接一次数据库
log4j.appender.DATABASE=org.apache.log4j.jdbc.JDBCAppender   
log4j.appender.DATABASE.URL=jdbc:mysql://localhost:3306/test 
log4j.appender.DATABASE.driver=com.mysql.jdbc.Driver   
log4j.appender.DATABASE.user=root   
log4j.appender.DATABASE.password=   
log4j.appender.DATABASE.sql=INSERT INTO SS_LOG4J_LOG (PRIORITY,LOGDATE,CLASS,METHOD,MSG) VALUES('%p','%d{yyyy-MM-dd HH:mm:ss}','%C','%M','%m')  
log4j.appender.DATABASE.layout=org.apache.log4j.PatternLayout  
log4j.appender.DATABASE.layout.ConversionPattern=%40d{[yyyy-MM-dd HH:mm:ss-S]} [%-5p] [ %-3.3r] [%-10.10c] %l  [%x] --> %n %m %n


#socket
log4j.appender.SOCKET=org.apache.log4j.RollingFileAppender   
log4j.appender.SOCKET.RemoteHost=localhost   
log4j.appender.SOCKET.Port=5001
log4j.appender.SOCKET.LocationInfo=true
log4j.appender.SOCKET.layout=org.apache.log4j.PatternLayout   
log4j.appender.SOCKET.layout.ConversionPattern=%40d{[yyyy-MM-dd HH:mm:ss-S]} [%-5p] [ %-3.3r] [%-10.10c] %l  [%x] --> %n %m %n

#slf4j+log4j组合使用模式：
#1. slf4j-api-1.5.11.jar
#2. slf4j-log4j12-1.5.11.jar
#3. log4j-1.2.15.jar
#4. log4j.properties(也可以是 log4j.xml)
 
#JCL+Log4J组合使用模式（即commons-logging+log4j）：
#1. commons-logging-1.1.jar
#2. log4j-1.2.15.jar
#3. log4j.properties

#log4j：
#import org.apache.log4j.Logger;
#Logger logger= Logger.getLogger(xx.class);
 
#slf4j+log4j：
#import  org.slf4j.Logger;
#import  org.slf4j.LoggerFactory;
#Logger logger = LoggerFactory.getLogger(xx.class);
 
#jcl+log4j:
#import org.apache.commons.logging.Log; 
#import org.apache.commons.logging.LogFactory;
#private static Log log = LogFactory.getLog(xx.class);